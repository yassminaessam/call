// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  calls     Call[]
  leads     Lead[]
  tickets   Ticket[]
  campaigns Campaign[]

  @@map("users")
}

model Call {
  id          String    @id @default(cuid())
  phoneNumber String
  duration    Int? // in seconds
  recording   String? // URL to recording
  transcript  String?
  status      CallStatus @default(PENDING)
  type        CallType
  department  Department
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  
  // AI Analysis
  sentiment   String?
  priority    Priority  @default(MEDIUM)
  summary     String?
  actionItems String[]
  
  @@map("calls")
}

model Lead {
  id          String     @id @default(cuid())
  firstName   String
  lastName    String?
  email       String?
  phone       String?
  company     String?
  source      LeadSource
  status      LeadStatus @default(NEW)
  value       Float?     // potential deal value
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  assignedTo  String?
  user        User?      @relation(fields: [assignedTo], references: [id])
  
  @@map("leads")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  company     String?
  address     String?
  industry    String?
  status      ClientStatus @default(ACTIVE)
  totalValue  Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("clients")
}

model Employee {
  id          String         @id @default(cuid())
  employeeId  String         @unique
  firstName   String
  lastName    String
  email       String         @unique
  phone       String?
  position    String
  department  Department
  salary      Float?
  hireDate    DateTime
  status      EmployeeStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@map("employees")
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  targetAudience String?
  metrics     Json?          // Store campaign metrics as JSON
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  createdBy   String?
  user        User?          @relation(fields: [createdBy], references: [id])
  
  @@map("campaigns")
}

model InventoryItem {
  id          String            @id @default(cuid())
  name        String
  sku         String            @unique
  description String?
  category    String?
  quantity    Int               @default(0)
  minQuantity Int               @default(0)
  price       Float?
  cost        Float?
  supplier    String?
  location    String?
  status      InventoryStatus   @default(IN_STOCK)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("inventory_items")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  category    TicketCategory
  priority    Priority     @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  resolution  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?
  
  // Relations
  customerId  String?
  assignedTo  String?
  user        User?        @relation(fields: [assignedTo], references: [id])
  
  @@map("tickets")
}

model AIResponse {
  id          String      @id @default(cuid())
  department  Department
  prompt      String
  response    String
  model       String?     @default("gpt-4")
  tokens      Int?
  cost        Float?
  createdAt   DateTime    @default(now())
  
  @@map("ai_responses")
}

model WebhookLog {
  id          String      @id @default(cuid())
  event       String
  source      String      // e.g., "twilio", "openai"
  payload     Json
  status      String      // success, failed, pending
  error       String?
  processedAt DateTime?
  createdAt   DateTime    @default(now())
  
  @@map("webhook_logs")
}

model CDR {
  id          BigInt       @id @default(autoincrement())
  calldate    DateTime?    @default(now())
  src         String?      @db.VarChar(64)  // Source number
  dst         String?      @db.VarChar(64)  // Destination number
  disposition String?      @db.VarChar(20)  // ANSWERED, NO ANSWER, BUSY, etc.
  duration    Int?         @default(0)      // Total call duration in seconds
  billsec     Int?         @default(0)      // Billable seconds
  actionType  String?      @db.VarChar(64)  // Type of action/call
  accountcode String?      @db.VarChar(64)  // Account code
  uniqueid    String       @unique @db.VarChar(128) // Unique call identifier
  
  // Additional fields for enhanced CDR
  channel     String?      @db.VarChar(128) // Channel used
  dcontext    String?      @db.VarChar(80)  // Destination context
  dstchannel  String?      @db.VarChar(128) // Destination channel
  lastapp     String?      @db.VarChar(80)  // Last application
  lastdata    String?      @db.VarChar(200) // Last application data
  amaflags    Int?         @default(0)      // AMA flags
  userfield   String?      @db.VarChar(255) // User field
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Indexes for better query performance
  @@index([calldate])
  @@index([src])
  @@index([dst])
  @@index([disposition])
  @@index([duration])
  @@map("cdr")
}

model CDRConnectorConfig {
  id         Int      @id @default(1)
  mode       CDRMode  @default(HTTPS)
  jsonConfig Json     @default("{}")  // Stores mode-specific configuration
  isActive   Boolean  @default(true)
  updatedAt  DateTime @updatedAt @default(now())
  
  @@map("cdr_connector_config")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum CallStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum CallType {
  INBOUND
  OUTBOUND
}

enum Department {
  SALES
  SUPPORT
  HR
  MARKETING
  MANUFACTURING
  AI_ANSWERING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadSource {
  WEBSITE
  PHONE
  EMAIL
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum CampaignType {
  EMAIL
  SOCIAL_MEDIA
  PPC
  CONTENT
  EVENT
  DIRECT_MAIL
  OTHER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  FEATURE_REQUEST
  BUG_REPORT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum CDRMode {
  HTTPS
  TCP
}